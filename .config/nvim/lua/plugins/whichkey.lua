local which_key = require "which-key"
which_key.setup {
  preset = "helix",
  plugins = {
    marks = true,
    registers = true,
    spelling = {
      enabled = true,
      suggestions = 20,
    },
    presets = {
      operators = false,
      motions = false,
      text_objects = false,
      windows = false,
      nav = false,
      z = false,
      g = false,
    },
  },
  win = {
    border = "rounded",
    no_overlap = false,
    padding = { 1, 2 },
    title = false,
    title_pos = "center",
    zindex = 1000,
  },
  show_help = false,
  show_keys = false,
  disable = {
    buftypes = {},
    filetypes = { "TelescopePrompt" },
  },
}
local wk = require "which-key"
wk.add {
  { "<leader>q", "<cmd>confirm q<CR>", desc = "Quit" },
  { "<leader>w", "<cmd>w<cr>", desc = "Write File", },
  { "<leader>e", "<cmd>Neotree toggle<CR>", desc = "Explorer", icon = { icon = " ", color = "green" } },
  { "<leader>;", "<cmd>tabnew | terminal<CR>", desc = "Term", icon = { icon = " ", color = "green" } },
  { "<leader>v", "<cmd>vsplit<CR>", desc = "Split", icon = { icon = " ", color = "red" } },
  { "<leader>b", group = "Buffers" },
  { "<leader>bb", "<cmd>Telescope buffers previewer=false<cr>", desc = "Find" },
  { "<leader>f", group = "Find" },
  { "<leader>fb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
  { "<leader>fc", "<cmd>Telescope colorscheme<cr>", desc = "Colorscheme" },
  { "<leader>ff", "<cmd>Telescope find_files<cr>", desc = "Find files" },
  { "<leader>fp", "<cmd>lua require('telescope').extensions.projects.projects()<cr>", desc = "Projects" },
  { "<leader>ft", "<cmd>Telescope live_grep<cr>", desc = "Find Text" },
  { "<leader>fs", "<cmd>Telescope grep_string<cr>", desc = "Find String" },
  { "<leader>fh", "<cmd>Telescope help_tags<cr>", desc = "Help" },
  { "<leader>fH", "<cmd>Telescope highlights<cr>", desc = "Highlights" },
  { "<leader>fi", "<cmd>lua require('telescope').extensions.media_files.media_files()<cr>", desc = "Media" },
  { "<leader>fl", "<cmd>Telescope resume<cr>", desc = "Last Search" },
  { "<leader>fM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
  { "<leader>fr", "<cmd>Telescope oldfiles<cr>", desc = "Recent File" },
  { "<leader>fR", "<cmd>Telescope registers<cr>", desc = "Registers" },
  { "<leader>fk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
  { "<leader>fC", "<cmd>Telescope commands<cr>", desc = "Commands" },
  { "<leader>d", group = "Debug" },
  { "<leader>g", group = "Git" },
  { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", desc = "Next Hunk" },
  { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", desc = "Prev Hunk" },
  { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", desc = "Preview Hunk" },
  { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk" },
  { "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>", desc = "Blame" },
  { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer" },
  { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk" },
  { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk" },
  { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Git Diff" },
  { "<leader>gg", "<cmd>Neogit<CR>", desc = "Neogit" },
  { "<leader>go", "<cmd>Telescope git_status<cr>", desc = "Open changed file" },
  { "<leader>gb", "<cmd>Telescope git_branches<cr>", desc = "Checkout branch" },
  { "<leader>gc", "<cmd>Telescope git_commits<cr>", desc = "Checkout commit" },
  { "<leader>gC", "<cmd>Telescope git_bcommits<cr>", desc = "Checkout commit(for current file)" },
  { "<leader>l", group = "LSP", icon = { icon = " ", color = "blue" } },
  { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action" },
  { "<leader>lf", "<cmd>lua vim.lsp.buf.format({async = true, filter = function(client) return client.name ~= 'typescript-tools' end})<cr>", desc = "Format" },
  { "<leader>li", "<cmd>LspInfo<cr>", desc = "Info" },
  { "<leader>lj", "<cmd>lua vim.diagnostic.goto_next()<cr>", desc = "Next Diagnostic" },
  { "<leader>lh", "<cmd>lua require('user.lspconfig').toggle_inlay_hints()<cr>", desc = "Hints" },
  { "<leader>lk", "<cmd>lua vim.diagnostic.goto_prev()<cr>", desc = "Prev Diagnostic" },
  { "<leader>ll", "<cmd>lua vim.lsp.codelens.run()<cr>", desc = "CodeLens Action" },
  { "<leader>lq", "<cmd>lua vim.diagnostic.setloclist()<cr>", desc = "Quickfix" },
  { "<leader>lr", "<cmd>lua vim.lsp.buf.rename()<cr>", desc = "Rename" },
  { "<leader>la", "<cmd>lua vim.lsp.buf.code_action()<cr>", desc = "Code Action", mode = { "v" } },
  { "<leader>lI", "<cmd>Mason<cr>", desc = "Mason Info" },
  { "<leader>ls", "<cmd>Telescope lsp_document_symbols<cr>", desc = "Document Symbols" },
  { "<leader>lS", "<cmd>Telescope lsp_dynamic_workspace_symbols<cr>", desc = "Workspace Symbols" },
  { "<leader>le", "<cmd>Telescope quickfix<cr>", desc = "Telescope Quickfix" },
  { "<leader>u", ":undo<CR>", desc = "Undo", icon = { icon = " ", color = "green" } },
  { "<leader>r", ":redo<CR>", desc = "Redo", icon = { icon = " ", color = "green" } }
}
